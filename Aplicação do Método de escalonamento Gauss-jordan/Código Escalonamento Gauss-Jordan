#include<stdio.h>
#include<stdlib.h>
#include <locale.h>
void imprimirResultadoFinalMatriz(float A[][20], int n, int i, int j)
{
	 for(i = 1; i <= n; i++)//imprime todos os valores das linhas.
    {
       for(j = 1; j <= (n+1); j++)//imprime todos os valores das colunas.
       {
   		  if(j == (n + 1))
		  {
		   	printf("        %0.4f \n", A[i][j]);
		  }         
       }
    }
}
void imprimirMatriz(float A[][20], int n, int i, int j)
{
    for(i = 1; i <= n; i++)//imprime todos os valores das linhas.
    {
       for(j = 1; j <= (n+1); j++)//imprime todos os valores das colunas.
       {
           printf("%0.4f  ", A[i][j]);
       }
       printf("\n\n");
    }
}
void trocarLinhas(float A[][20], int n, int j)
{
    int k;//variável representa as linhas.
    float x[10];
    if(A[1][1] == 0)
    {
        for(k=2; k<=n; k++)
        {
            if(A[k][1] != 0)//se a segunda linha já conter o pivô != de 0, então ocorre a troca de linhas no próximo for.
            {
                for(j=1; j<=n+1; j++)//Onde ocorre a troca(inversão) das linhas.
                {
                    x[j] = A[1][j];
                    A[1][j] = A[k][j];
                    A[k][j] = x[j];
                }
            }
        }
    }
}
void zeraInfefrior(float A[][20], int n, int i, int j)
{
    int k;
    float c;
    for(j=1; j<=n; j++)//percorre as colonas. 
    {
        for(i=1; i<=n; i++)//percorre as linhas.
        {
            if(i>j)//na primeira vez "i" e "j" serão iguais, portanto não vai processar nas linhas 45 a 48.
            {
                c=-(A[i][j]/A[j][j]);
                for(k=1; k<=n + 1; k++)//será percorrida as colunas da matriz juntamente com os termos independentes.
                {
                    A[i][k] = c*A[j][k]+A[i][k];
                }
            }
        }
    }
}
void zeraSuperior(float A[][20], int n, int i, int j)
{
    int k;
    float c;
    for(j=1; j<=n; j++)
    {
        for(i=1; i<=n; i++)
        {
            if(i<j)
            {
                c=-(A[i][j]/A[j][j]);
                for(k=1; k<=n+1; k++)
                {
                    A[i][k]=c*A[j][k]+A[i][k];
                }
            }
        }
    }
}
void diagonal(float A[][20], int n, int i, int j)
{
    int k;
    float c;
    float d; 
    for(j=1; j<=n; j++)
    {
        for(i=1; i<=n; i++)
        {
            if(i==j)
            {
                d = A[i][j];
                for(k=1; k<=n+1; k++)
                {
                    A[i][k]=A[i][k]/d;
                }
            }
        }
    }
}
int main()
{
    int n, i, j;
    float A[20][20];
    setlocale(LC_ALL, "Portuguese");
    printf("\n\nMétodo de Gauss-Jordan\t\n\n");
    printf("Informe o tamanho da matriz(EX: 2 por 2, 3 por 3 etc.. ) \nSe o tamanho for 2 por 2, digite o N° 2, se for 3 por 3 digite o N° 3, etc...: ");
    scanf("%d", &n);
    printf("\n\nDigite os elementos da matriz + os pivores: \n\n");
    for(i=1; i<=n; i++)
    {
        for(j=1; j<=(n+1); j++)
        {
            printf("LINHA:[%d]COLUNA:[%d]: ", i, j);
            scanf(" %f", &A[i][j]);
        }
        printf("\n\n");
    }
    
    trocarLinhas(A, n, j);

    printf("\n\n\nMatriz ampliada:\n\n");
    imprimirMatriz(A, n, i, j);
    // getchar(); Enter

    zeraInfefrior(A, n, i, j);

    printf("\n\n\nMatriz com triângulo inferior zerado:\n\n");
    imprimirMatriz(A, n, i, j);
   // getchar();

    zeraSuperior(A, n, i, j);
    
    printf("\n\n\nMatriz com o triângulo superior zerado:\n\n");
    imprimirMatriz(A, n, i, j);
   // getchar();

    diagonal(A, n, i, j);

    printf("\n\n\nMatriz identidade: \n\n");
    imprimirMatriz(A, n, i, j);
   // getchar();
    
    printf("\nRESULTADO FINAL:\n\n");
	imprimirResultadoFinalMatriz(A, n, i, j);
   // getchar();
    return 0;
}
